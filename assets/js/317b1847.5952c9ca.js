"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[2555],{3905:(e,n,a)=>{a.d(n,{Zo:()=>c,kt:()=>g});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=t.createContext({}),u=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},c=function(e){var n=u(e.components);return t.createElement(s.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(a),p=r,g=d["".concat(s,".").concat(p)]||d[p]||m[p]||l;return a?t.createElement(g,o(o({ref:n},c),{},{components:a})):t.createElement(g,o({ref:n},c))}));function g(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=p;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[d]="string"==typeof e?e:r,o[1]=i;for(var u=2;u<l;u++)o[u]=a[u];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}p.displayName="MDXCreateElement"},5162:(e,n,a)=>{a.d(n,{Z:()=>o});var t=a(7294),r=a(6010);const l="tabItem_Ymn6";function o(e){let{children:n,hidden:a,className:o}=e;return t.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:a},n)}},4866:(e,n,a)=>{a.d(n,{Z:()=>x});var t=a(7462),r=a(7294),l=a(6010),o=a(2466),i=a(6550),s=a(1980),u=a(7392),c=a(12);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:a,attributes:t,default:r}}=e;return{value:n,label:a,attributes:t,default:r}}))}function m(e){const{values:n,children:a}=e;return(0,r.useMemo)((()=>{const e=n??d(a);return function(e){const n=(0,u.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,a])}function p(e){let{value:n,tabValues:a}=e;return a.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:a}=e;const t=(0,i.k6)(),l=function(e){let{queryString:n=!1,groupId:a}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return a??null}({queryString:n,groupId:a});return[(0,s._X)(l),(0,r.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(t.location.search);n.set(l,e),t.replace({...t.location,search:n.toString()})}),[l,t])]}function f(e){const{defaultValue:n,queryString:a=!1,groupId:t}=e,l=m(e),[o,i]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:a}=e;if(0===a.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:a}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${a.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const t=a.find((e=>e.default))??a[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:l}))),[s,u]=g({queryString:a,groupId:t}),[d,f]=function(e){let{groupId:n}=e;const a=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,l]=(0,c.Nk)(a);return[t,(0,r.useCallback)((e=>{a&&l.set(e)}),[a,l])]}({groupId:t}),y=(()=>{const e=s??d;return p({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{y&&i(y)}),[y]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),f(e)}),[u,f,l]),tabValues:l}}var y=a(2389);const b="tabList__CuJ",h="tabItem_LNqP";function v(e){let{className:n,block:a,selectedValue:i,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),m=e=>{const n=e.currentTarget,a=c.indexOf(n),t=u[a].value;t!==i&&(d(n),s(t))},p=e=>{let n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const a=c.indexOf(e.currentTarget)+1;n=c[a]??c[0];break}case"ArrowLeft":{const a=c.indexOf(e.currentTarget)-1;n=c[a]??c[c.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},n)},u.map((e=>{let{value:n,label:a,attributes:o}=e;return r.createElement("li",(0,t.Z)({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,key:n,ref:e=>c.push(e),onKeyDown:p,onClick:m},o,{className:(0,l.Z)("tabs__item",h,o?.className,{"tabs__item--active":i===n})}),a??n)})))}function w(e){let{lazy:n,children:a,selectedValue:t}=e;const l=(Array.isArray(a)?a:[a]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===t));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==t}))))}function k(e){const n=f(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",b)},r.createElement(v,(0,t.Z)({},e,n)),r.createElement(w,(0,t.Z)({},e,n)))}function x(e){const n=(0,y.Z)();return r.createElement(k,(0,t.Z)({key:String(n)},e))}},7394:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var t=a(7462),r=(a(7294),a(3905)),l=a(4866),o=a(5162);const i={},s="Dial",u={unversionedId:"extras/editor/dial",id:"extras/editor/dial",title:"Dial",description:"You can enable the extra with the :LazyExtras command.",source:"@site/docs/extras/editor/dial.md",sourceDirName:"extras/editor",slug:"/extras/editor/dial",permalink:"/extras/editor/dial",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/extras/editor/dial.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Aerial",permalink:"/extras/editor/aerial"},next:{title:"Fzf",permalink:"/extras/editor/fzf"}},c={},d=[{value:"dial.nvim",id:"dialnvim",level:2}],m={toc:d};function p(e){let{components:n,...a}=e;return(0,r.kt)("wrapper",(0,t.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"dial"},(0,r.kt)("inlineCode",{parentName:"h1"},"Dial")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You can enable the extra with the ",(0,r.kt)("inlineCode",{parentName:"p"},":LazyExtras")," command.\nPlugins marked as optional will only be configured if they are installed.")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Alternatively, you can add it to your ",(0,r.kt)("code",null,"lazy.nvim")," imports"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="lua/config/lazy.lua" {4}',title:'"lua/config/lazy.lua"',"{4}":!0},'require("lazy").setup({\n  spec = {\n    { "LazyVim/LazyVim", import = "lazyvim.plugins" },\n    { import = "lazyvim.plugins.extras.editor.dial" },\n    { import = "plugins" },\n  },\n})\n'))),(0,r.kt)("p",null,"Below you can find a list of included plugins and their default settings."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"You don't need to copy the default settings to your config.\nThey are only shown here for reference.")),(0,r.kt)("h2",{id:"dialnvim"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/monaqa/dial.nvim"},"dial.nvim")),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = function()\n  local augend = require("dial.augend")\n\n  local logical_alias = augend.constant.new({\n    elements = { "&&", "||" },\n    word = false,\n    cyclic = true,\n  })\n\n  local ordinal_numbers = augend.constant.new({\n    -- elements through which we cycle. When we increment, we go down\n    -- On decrement we go up\n    elements = {\n      "first",\n      "second",\n      "third",\n      "fourth",\n      "fifth",\n      "sixth",\n      "seventh",\n      "eighth",\n      "ninth",\n      "tenth",\n    },\n    -- if true, it only matches strings with word boundary. firstDate wouldn\'t work for example\n    word = false,\n    -- do we cycle back and forth (tenth to first on increment, first to tenth on decrement).\n    -- Otherwise nothing will happen when there are no further values\n    cyclic = true,\n  })\n\n  local weekdays = augend.constant.new({\n    elements = {\n      "Monday",\n      "Tuesday",\n      "Wednesday",\n      "Thursday",\n      "Friday",\n      "Saturday",\n      "Sunday",\n    },\n    word = true,\n    cyclic = true,\n  })\n\n  local months = augend.constant.new({\n    elements = {\n      "January",\n      "February",\n      "March",\n      "April",\n      "May",\n      "June",\n      "July",\n      "August",\n      "September",\n      "October",\n      "November",\n      "December",\n    },\n    word = true,\n    cyclic = true,\n  })\n\n  local capitalized_boolean = augend.constant.new({\n    elements = {\n      "True",\n      "False",\n    },\n    word = true,\n    cyclic = true,\n  })\n\n  return {\n    dials_by_ft = {\n      css = "css",\n      vue = "vue",\n      javascript = "typescript",\n      typescript = "typescript",\n      typescriptreact = "typescript",\n      javascriptreact = "typescript",\n      json = "json",\n      lua = "lua",\n      markdown = "markdown",\n      python = "python",\n      sass = "css",\n      scss = "css",\n      yaml = "yaml",\n    },\n    groups = {\n      default = {\n        augend.integer.alias.decimal, -- nonnegative decimal number (0, 1, 2, 3, ...)\n        augend.integer.alias.hex, -- nonnegative hex number  (0x01, 0x1a1f, etc.)\n        augend.date.alias["%Y/%m/%d"], -- date (2022/02/19, etc.)\n        ordinal_numbers,\n        weekdays,\n        months,\n        capitalized_boolean,\n        augend.constant.alias.bool, -- boolean value (true <-> false)\n        logical_alias,\n      },\n      vue = {\n        augend.integer.alias.decimal_int, -- nonnegative and negative decimal number\n        augend.constant.alias.bool, -- boolean value (true <-> false)\n        logical_alias,\n        augend.constant.new({ elements = { "let", "const" } }),\n        augend.hexcolor.new({ case = "lower" }),\n        augend.hexcolor.new({ case = "upper" }),\n      },\n      typescript = {\n        augend.integer.alias.decimal_int, -- nonnegative and negative decimal number\n        augend.constant.alias.bool, -- boolean value (true <-> false)\n        logical_alias,\n        augend.constant.new({ elements = { "let", "const" } }),\n      },\n      yaml = {\n        augend.integer.alias.decimal_int, -- nonnegative and negative decimal number\n        augend.constant.alias.bool, -- boolean value (true <-> false)\n      },\n      css = {\n        augend.integer.alias.decimal_int, -- nonnegative and negative decimal number\n        augend.hexcolor.new({\n          case = "lower",\n        }),\n        augend.hexcolor.new({\n          case = "upper",\n        }),\n      },\n      markdown = {\n        augend.misc.alias.markdown_header,\n      },\n      json = {\n        augend.integer.alias.decimal_int, -- nonnegative and negative decimal number\n        augend.semver.alias.semver, -- versioning (v1.1.2)\n      },\n      lua = {\n        augend.integer.alias.decimal_int, -- nonnegative and negative decimal number\n        augend.constant.alias.bool, -- boolean value (true <-> false)\n        augend.constant.new({\n          elements = { "and", "or" },\n          word = true, -- if false, "sand" is incremented into "sor", "doctor" into "doctand", etc.\n          cyclic = true, -- "or" is incremented into "and".\n        }),\n      },\n      python = {\n        augend.integer.alias.decimal_int, -- nonnegative and negative decimal number\n        capitalized_boolean,\n        logical_alias,\n      },\n    },\n  }\nend\n'))),(0,r.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "monaqa/dial.nvim",\n  recommended = true,\n  desc = "Increment and decrement numbers, dates, and more",\n  -- stylua: ignore\n  keys = {\n    { "<C-a>", function() return M.dial(true) end, expr = true, desc = "Increment", mode = {"n", "v"} },\n    { "<C-x>", function() return M.dial(false) end, expr = true, desc = "Decrement", mode = {"n", "v"} },\n    { "g<C-a>", function() return M.dial(true, true) end, expr = true, desc = "Increment", mode = {"n", "v"} },\n    { "g<C-x>", function() return M.dial(false, true) end, expr = true, desc = "Decrement", mode = {"n", "v"} },\n  },\n  opts = function()\n    local augend = require("dial.augend")\n\n    local logical_alias = augend.constant.new({\n      elements = { "&&", "||" },\n      word = false,\n      cyclic = true,\n    })\n\n    local ordinal_numbers = augend.constant.new({\n      -- elements through which we cycle. When we increment, we go down\n      -- On decrement we go up\n      elements = {\n        "first",\n        "second",\n        "third",\n        "fourth",\n        "fifth",\n        "sixth",\n        "seventh",\n        "eighth",\n        "ninth",\n        "tenth",\n      },\n      -- if true, it only matches strings with word boundary. firstDate wouldn\'t work for example\n      word = false,\n      -- do we cycle back and forth (tenth to first on increment, first to tenth on decrement).\n      -- Otherwise nothing will happen when there are no further values\n      cyclic = true,\n    })\n\n    local weekdays = augend.constant.new({\n      elements = {\n        "Monday",\n        "Tuesday",\n        "Wednesday",\n        "Thursday",\n        "Friday",\n        "Saturday",\n        "Sunday",\n      },\n      word = true,\n      cyclic = true,\n    })\n\n    local months = augend.constant.new({\n      elements = {\n        "January",\n        "February",\n        "March",\n        "April",\n        "May",\n        "June",\n        "July",\n        "August",\n        "September",\n        "October",\n        "November",\n        "December",\n      },\n      word = true,\n      cyclic = true,\n    })\n\n    local capitalized_boolean = augend.constant.new({\n      elements = {\n        "True",\n        "False",\n      },\n      word = true,\n      cyclic = true,\n    })\n\n    return {\n      dials_by_ft = {\n        css = "css",\n        vue = "vue",\n        javascript = "typescript",\n        typescript = "typescript",\n        typescriptreact = "typescript",\n        javascriptreact = "typescript",\n        json = "json",\n        lua = "lua",\n        markdown = "markdown",\n        python = "python",\n        sass = "css",\n        scss = "css",\n        yaml = "yaml",\n      },\n      groups = {\n        default = {\n          augend.integer.alias.decimal, -- nonnegative decimal number (0, 1, 2, 3, ...)\n          augend.integer.alias.hex, -- nonnegative hex number  (0x01, 0x1a1f, etc.)\n          augend.date.alias["%Y/%m/%d"], -- date (2022/02/19, etc.)\n          ordinal_numbers,\n          weekdays,\n          months,\n          capitalized_boolean,\n          augend.constant.alias.bool, -- boolean value (true <-> false)\n          logical_alias,\n        },\n        vue = {\n          augend.integer.alias.decimal_int, -- nonnegative and negative decimal number\n          augend.constant.alias.bool, -- boolean value (true <-> false)\n          logical_alias,\n          augend.constant.new({ elements = { "let", "const" } }),\n          augend.hexcolor.new({ case = "lower" }),\n          augend.hexcolor.new({ case = "upper" }),\n        },\n        typescript = {\n          augend.integer.alias.decimal_int, -- nonnegative and negative decimal number\n          augend.constant.alias.bool, -- boolean value (true <-> false)\n          logical_alias,\n          augend.constant.new({ elements = { "let", "const" } }),\n        },\n        yaml = {\n          augend.integer.alias.decimal_int, -- nonnegative and negative decimal number\n          augend.constant.alias.bool, -- boolean value (true <-> false)\n        },\n        css = {\n          augend.integer.alias.decimal_int, -- nonnegative and negative decimal number\n          augend.hexcolor.new({\n            case = "lower",\n          }),\n          augend.hexcolor.new({\n            case = "upper",\n          }),\n        },\n        markdown = {\n          augend.misc.alias.markdown_header,\n        },\n        json = {\n          augend.integer.alias.decimal_int, -- nonnegative and negative decimal number\n          augend.semver.alias.semver, -- versioning (v1.1.2)\n        },\n        lua = {\n          augend.integer.alias.decimal_int, -- nonnegative and negative decimal number\n          augend.constant.alias.bool, -- boolean value (true <-> false)\n          augend.constant.new({\n            elements = { "and", "or" },\n            word = true, -- if false, "sand" is incremented into "sor", "doctor" into "doctand", etc.\n            cyclic = true, -- "or" is incremented into "and".\n          }),\n        },\n        python = {\n          augend.integer.alias.decimal_int, -- nonnegative and negative decimal number\n          capitalized_boolean,\n          logical_alias,\n        },\n      },\n    }\n  end,\n  config = function(_, opts)\n    require("dial.config").augends:register_group(opts.groups)\n    vim.g.dials_by_ft = opts.dials_by_ft\n  end,\n}\n')))))}p.isMDXComponent=!0}}]);