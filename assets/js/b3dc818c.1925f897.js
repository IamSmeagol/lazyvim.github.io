"use strict";(self.webpackChunklazyvim=self.webpackChunklazyvim||[]).push([[2228],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>b});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(t),m=r,b=c["".concat(s,".").concat(m)]||c[m]||d[m]||l;return t?a.createElement(b,o(o({ref:n},p),{},{components:t})):a.createElement(b,o({ref:n},p))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[c]="string"==typeof e?e:r,o[1]=i;for(var u=2;u<l;u++)o[u]=t[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>o});var a=t(7294),r=t(6010);const l="tabItem_Ymn6";function o(e){let{children:n,hidden:t,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>x});var a=t(7462),r=t(7294),l=t(6010),o=t(2466),i=t(6550),s=t(1980),u=t(7392),p=t(12);function c(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}function d(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??c(t);return function(e){const n=(0,u.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function b(e){let{queryString:n=!1,groupId:t}=e;const a=(0,i.k6)(),l=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s._X)(l),(0,r.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(a.location.search);n.set(l,e),a.replace({...a.location,search:n.toString()})}),[l,a])]}function f(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,l=d(e),[o,i]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:l}))),[s,u]=b({queryString:t,groupId:a}),[c,f]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,l]=(0,p.Nk)(t);return[a,(0,r.useCallback)((e=>{t&&l.set(e)}),[t,l])]}({groupId:a}),h=(()=>{const e=s??c;return m({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{h&&i(h)}),[h]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),f(e)}),[u,f,l]),tabValues:l}}var h=t(2389);const g="tabList__CuJ",y="tabItem_LNqP";function k(e){let{className:n,block:t,selectedValue:i,selectValue:s,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.o5)(),d=e=>{const n=e.currentTarget,t=p.indexOf(n),a=u[t].value;a!==i&&(c(n),s(a))},m=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=p.indexOf(e.currentTarget)+1;n=p[t]??p[0];break}case"ArrowLeft":{const t=p.indexOf(e.currentTarget)-1;n=p[t]??p[p.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":t},n)},u.map((e=>{let{value:n,label:t,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,key:n,ref:e=>p.push(e),onKeyDown:m,onClick:d},o,{className:(0,l.Z)("tabs__item",y,o?.className,{"tabs__item--active":i===n})}),t??n)})))}function v(e){let{lazy:n,children:t,selectedValue:a}=e;const l=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function w(e){const n=f(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",g)},r.createElement(k,(0,a.Z)({},e,n)),r.createElement(v,(0,a.Z)({},e,n)))}function x(e){const n=(0,h.Z)();return r.createElement(w,(0,a.Z)({key:String(n)},e))}},5478:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>u,toc:()=>c});var a=t(7462),r=(t(7294),t(3905)),l=t(4866),o=t(5162);const i={},s="Blink",u={unversionedId:"extras/coding/blink",id:"extras/coding/blink",title:"Blink",description:"You can enable the extra with the :LazyExtras command.",source:"@site/docs/extras/coding/blink.md",sourceDirName:"extras/coding",slug:"/extras/coding/blink",permalink:"/extras/coding/blink",draft:!1,editUrl:"https://github.com/LazyVim/lazyvim.github.io/tree/main/docs/extras/coding/blink.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Extras",permalink:"/extras/"},next:{title:"Codeium",permalink:"/extras/coding/codeium"}},p={},c=[{value:"blink.cmp",id:"blinkcmp",level:2},{value:"friendly-snippets",id:"friendly-snippets",level:2},{value:"blink.cmp",id:"blinkcmp-1",level:2},{value:"blink.cmp",id:"blinkcmp-2",level:2}],d={toc:c};function m(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"blink"},(0,r.kt)("inlineCode",{parentName:"h1"},"Blink")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You can enable the extra with the ",(0,r.kt)("inlineCode",{parentName:"p"},":LazyExtras")," command.\nPlugins marked as optional will only be configured if they are installed.")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Alternatively, you can add it to your ",(0,r.kt)("code",null,"lazy.nvim")," imports"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua",metastring:'title="lua/config/lazy.lua" {4}',title:'"lua/config/lazy.lua"',"{4}":!0},'require("lazy").setup({\n  spec = {\n    { "LazyVim/LazyVim", import = "lazyvim.plugins" },\n    { import = "lazyvim.plugins.extras.coding.blink" },\n    { import = "plugins" },\n  },\n})\n'))),(0,r.kt)("p",null,"Below you can find a list of included plugins and their default settings."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"You don't need to copy the default settings to your config.\nThey are only shown here for reference.")),(0,r.kt)("h2",{id:"blinkcmp"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/saghen/blink.cmp"},"blink.cmp")),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  fuzzy = {\n    prebuilt_binaries = {\n      download = true,\n      force_version = "v0.5.0",\n    },\n  },\n  highlight = {\n    -- sets the fallback highlight groups to nvim-cmp\'s highlight groups\n    -- useful for when your theme doesn\'t support blink.cmp\n    -- will be removed in a future release, assuming themes add support\n    use_nvim_cmp_as_default = false,\n  },\n  -- set to \'mono\' for \'Nerd Font Mono\' or \'normal\' for \'Nerd Font\'\n  -- adjusts spacing to ensure icons are aligned\n  nerd_font_variant = "mono",\n  windows = {\n    autocomplete = {\n      draw = "reversed",\n    },\n    documentation = {\n      auto_show = true,\n    },\n    ghost_text = {\n      enabled = true,\n    },\n  },\n\n  -- experimental auto-brackets support\n  accept = { auto_brackets = { enabled = true } },\n\n  -- experimental signature help support\n  -- trigger = { signature_help = { enabled = true } }\n  sources = {\n    completion = {\n      -- remember to enable your providers here\n      enabled_providers = { "lsp", "path", "snippets", "buffer" },\n    },\n  },\n\n  keymap = {\n    preset = "enter",\n  },\n}\n'))),(0,r.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "saghen/blink.cmp",\n  -- TODO: use release version\n  -- version = "*",\n  opts_extend = { "sources.completion.enabled_providers" },\n  dependencies = {\n    "rafamadriz/friendly-snippets",\n    -- add blink.compat to dependencies\n    -- { "saghen/blink.compat", opts = {} },\n  },\n  event = "InsertEnter",\n\n  ---@module \'blink.cmp\'\n  ---@type blink.cmp.Config\n  opts = {\n    fuzzy = {\n      prebuilt_binaries = {\n        download = true,\n        force_version = "v0.5.0",\n      },\n    },\n    highlight = {\n      -- sets the fallback highlight groups to nvim-cmp\'s highlight groups\n      -- useful for when your theme doesn\'t support blink.cmp\n      -- will be removed in a future release, assuming themes add support\n      use_nvim_cmp_as_default = false,\n    },\n    -- set to \'mono\' for \'Nerd Font Mono\' or \'normal\' for \'Nerd Font\'\n    -- adjusts spacing to ensure icons are aligned\n    nerd_font_variant = "mono",\n    windows = {\n      autocomplete = {\n        draw = "reversed",\n      },\n      documentation = {\n        auto_show = true,\n      },\n      ghost_text = {\n        enabled = true,\n      },\n    },\n\n    -- experimental auto-brackets support\n    accept = { auto_brackets = { enabled = true } },\n\n    -- experimental signature help support\n    -- trigger = { signature_help = { enabled = true } }\n    sources = {\n      completion = {\n        -- remember to enable your providers here\n        enabled_providers = { "lsp", "path", "snippets", "buffer" },\n      },\n    },\n\n    keymap = {\n      preset = "enter",\n    },\n  },\n}\n')))),(0,r.kt)("h2",{id:"friendly-snippets"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/rafamadriz/friendly-snippets"},"friendly-snippets")),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"opts = nil\n"))),(0,r.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "rafamadriz/friendly-snippets",\n  -- add blink.compat to dependencies\n  -- { "saghen/blink.compat", opts = {} },\n}\n')))),(0,r.kt)("h2",{id:"blinkcmp-1"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/saghen/blink.cmp"},"blink.cmp")),(0,r.kt)("p",null," add icons"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},"opts = function(_, opts)\n  opts.kind_icons = LazyVim.config.icons.kinds\nend\n"))),(0,r.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "saghen/blink.cmp",\n  opts = function(_, opts)\n    opts.kind_icons = LazyVim.config.icons.kinds\n  end,\n}\n')))),(0,r.kt)("h2",{id:"blinkcmp-2"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/saghen/blink.cmp"},"blink.cmp")),(0,r.kt)("p",null," lazydev"),(0,r.kt)(l.Z,{mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"opts",label:"Options",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'opts = {\n  sources = {\n    completion = {\n      -- add lazydev to your completion providers\n      enabled_providers = { "lazydev" },\n    },\n    providers = {\n      lsp = {\n        -- dont show LuaLS require statements when lazydev has items\n        fallback_for = { "lazydev" },\n      },\n      lazydev = {\n        name = "LazyDev",\n        module = "lazydev.integrations.blink",\n      },\n    },\n  },\n}\n'))),(0,r.kt)(o.Z,{value:"code",label:"Full Spec",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-lua"},'{\n  "saghen/blink.cmp",\n  opts = {\n    sources = {\n      completion = {\n        -- add lazydev to your completion providers\n        enabled_providers = { "lazydev" },\n      },\n      providers = {\n        lsp = {\n          -- dont show LuaLS require statements when lazydev has items\n          fallback_for = { "lazydev" },\n        },\n        lazydev = {\n          name = "LazyDev",\n          module = "lazydev.integrations.blink",\n        },\n      },\n    },\n  },\n}\n')))))}m.isMDXComponent=!0}}]);